# 交互视觉评审系统API文档
# yaml文件格式，用swagger渲染

swagger: '3.0'
info:
  title: 交互视觉评审系统
  description:
    1. 很简单的，一看就懂，照瓢画葫

    2. 所有的请求都需要带 **认证头**，并且数据全部放在`data`字段中

    3. 下面所有的接口都会返回`code`数据，如果没有返回数据，首先应该排查的是 **接口地址** 是否调用正确，然后查看网络问题，最后再去服务器；所有的接口返回数据都在`data`字段中，如果请求的操作不成功，则是`msg`字段

    4. 在这里，所有请求接口地址在网络连通的情况下都应该被返回数据，所以可能会有以下情况：状态码为`404`，还有数据返回

    5. 在这里，用户唯一标识是他在OA系统中的登录时的用户名，与邮箱相对应，截取@之前的即可
  version: 0.0.1
host: api.zeus.cn
schemes:
  - http
  - https
basePath: /v1.0
produces:
  - application/json
paths:
  /utils:
    get:
      summary: 获取通用库的信息
      description: 里面有一个type字段标识存储的数据类型，name- 姓名、occupation- 职业、code- 信息码、other- 其它，未完待续中....
      parameters:
        - name: type
          in: query
          type: string
          description: 数据记录类型，无该字段则默认查询所有
        - name: index
          in: query
          type: string
          description: 从第几项开始，无该字段则默认为1
        - name: size
          in: query
          type: string
          description: 返回数据的数量，无该字段则默认为10
      tags:
        - 通用 Util
      responses:
        200:
          description: 返回查询的数据
          schema:
            type: object
            properties:
              code:
                type: number
                description: 信息码
                example: 1
              data:
                type: object
                description: 返回数据
                properties:
                  total:
                    type: number
                    description: items数组的长度，也就是返回数据的多少
                    example: 1
                  items:
                    type: array
                    description: 返回的数组
                    items:
                      type: object
                      description: 一条记录数据
                      properties:
                        type:
                          type: string
                          description: 数据类型
                          example: name
                        en:
                          type: string
                          description: 数据英文名，这个是具有唯一性的
                          example: shauqitao
                        zh:
                          type: string
                          description: 中文名
                          example: 帅气涛
        default:
          description: 其他错误，看http状态码和返回数据

  # 中英对照接口 --- 开始
  /util/zh/en:
    get:
      summary: 中英对应
      description: 返回英文对应的中文名
      parameters:
        - name: Authorization
          in: header
          type: string
          required: true
          description: 简单认证下API，就怕有人不小心操作随便输入个接口删了点数据
        - name: data
          in: body
          type: array
          description: 英文数组
          required: true
          schema:
            type: array
            example:
              - en
              - shuaiqitao
      tags:
        - 通用 Util
      responses:
        200:
          description: 返回中文名
          schema:
            type: object
            properties:
              code:
                type: number
                description: 信息码
                example: 1
              data:
                  $ref: '#/definitions/Zh_En'
        400:
          description: 返回不存在的英文字段
          schema:
            type: object
            properties:
              code:
                type: number
                description: 信息码
                example: 0
              msg:
                type: string
                description: 错误信息
                example: xx不存在中英对照，请创建
        default:
          description: 其他错误，看http状态码和返回数据
    # ===================================我是一条分割线==============================
    post:
      summary: 创建中英对照
      description: 在服务器数据库中创建
      parameters:
        - name: Authorization
          in: header
          type: string
          required: true
          description: 简单认证下API，就怕有人不小心操作随便输入个接口删了点数据
        - name: data
          in: body
          type: object
          required: true
          description: 中英对照的对象
          schema:
            type: object
            properties:
              type:
                type: string
                description: 类型
                example: name
              shuaiqitao:
                type: string
                description: 中文名
                example: 帅气涛

      tags:
        - 通用 Util
      responses:
        200:
          description: 创建成功
          schema:
            type: onbject
            properties:
              code:
                type: number
                description: 信息码
                example: 1
              data:
                type: string
                description: 提示信息
                example: 创建成功
        405:
          description: 返回已存在的，可使用PUT方法更新
          schema:
            type: object
            properties:
              code:
                type: number
                description: 信息码
                example: 0
              msg:
                type: string
                description: 错误信息
                example: 已存在xx，如需更新请用PUT方法
        default:
          description: 其他错误，看http状态码和返回数据
    # ===================================我是一条分割线==============================
    put:
      summary: 更新中英对照
      description: 根据传入的对象进行更新数据库
      parameters:
        - name: Authorization
          in: header
          type: string
          required: true
          description: 简单认证下API，就怕有人不小心操作随便输入个接口删了点数据
        - name: data
          in: body
          type: object
          required: true
          description: 中英对象
          schema:
            type: object
            properties:
              en:
                type: string
                description: 中文名
                example: zh_en
              shuaiqitao:
                type: string
                description: 中文名
                example: 帅气涛
      tags:
        - 通用 Util
      responses:
        200:
          description: 更新成功
          schema:
            type: object
            properties:
              code:
                type: number
                description: 信息码
                example: 1
              data:
                type: string
                description: 返回提示
                example: 更新成功
        405:
          description: 返回未存在的，可使用post方法创建
          schema:
            type: object
            properties:
              code:
                type: number
                description: 信息码
                example: 0
              msg:
                type: string
                description: 错误提示
                example: 未存在xx，如需创建请使用post方法
        default:
          description: 其他错误，看http状态码和返回数据
  # 中英对照接口 --- 结束

  # 登录接口 --- 开始
  /user/login:
    post:
      summary: 用户登录接口
      description: |
        用户登录，简单地使用cookie认证，这里需要调用后台的域账号,暂时搁置
      parameters:
        - name: Authorization
          in: header
          type: string
          required: true
          description: 简单认证下API，就怕有人不小心操作随便输入个接口删了点数据
        - name: data
          in: body
          required: true
          description: 传递的数据
          schema:
            type: object
            properties:
              user:
                type: string
                description: 域账号
                example: ningtao
              password:
                type: string
                description: 域账号的密码
                example: i won't tell you
      tags:
        - 用户 User
      responses:
        200:
          description: 返回登录成功
          schema:
            type: object
            properties:
              code:
                type: number
                description: 信息码
                example: 1
              data:
                type: object
                properties:
                  user:
                    type: number
                    description: 用户的id,这是唯一的标识
                    example: shuaiqitao
                  lv:
                    type: number
                    description: 用户权限等级(0-评委、1-后台用户、2-管理员用户)
                    example: 0
        400:
          description: 登录失败，少参数或者密码错误
          schema:
            type: object
            properties:
              code:
                type: number
                description: 信息码
                example: 0
              msg:
                type: string
                description: 错误提示
                example: 缺少password参数、密码错误、账号不存在
        401:
          description: 未授权，需在header中添加Authorization，基本认证
          schema:
            $ref: '#/definitions/401'
        default:
          description: 其它错误，比如少参数会返回400，code为1，msg为少参数
    # ===================================我是一条分割线==============================
    head:
      summary: 检测登录失效
      description: 返回头有个Login-Status，如果存在，则已登录；无则未登录
      parameters:
        - name: Authorization
          in: header
          type: string
          required: true
          description: 简单认证下API，就怕有人不小心操作随便输入个接口删了点数据
      tags:
        - 用户 User
      responses:
        default:
          description: 注意这个是在响应头中！！！
          schema:
            type: object
            properties:
              Login-Status:
                type: string
                description: 用户ID_用户权限等级
                example: shuaiqitao_100
  # 登录接口 --- 结束

  # 后台用户信息接口 --- 开始
  /users:
    get:
      summary: 获取后台用户列表
      description: 返回所有后台用户信息
      parameters:
        - name: Authorization
          in: header
          type: string
          required: true
          description: 简单认证下API，就怕有人不小心操作随便输入个接口删了点数据
        - name: index
          in: query
          type: string
          description: 从第几项开始，无则默认从1开始
        - name: size
          in: query
          type: string
          description: 返回多少项数据，无则默认返回10项
        - name: role
          in: query
          type: string
          description: 筛选角色类型，无则返回全部
      tags:
        - 用户 User
      responses:
        200:
          description: 返回用户列表
          schema:
            type: object
            properties:
              code:
                type: number
                description: 信息码
                example: 1
              data:
                type: object
                description: 返回数据
                properties:
                  total:
                    type: number
                    description: 共多少数据返回
                    example: 1
                  items:
                    type: array
                    description: 一条数据
                    items:
                      $ref: "#/definitions/User"
        401:
          description: 未授权，需在header中添加Authorization，基本认证
          schema:
            $ref: '#/definitions/401'
        default:
          description: 其他错误，看http状态码和返回数据
    # ===================================我是一条分割线==============================
    post:
      summary: 创建一个后台用户
      description: 插入到数据库中，，，凑个字数，毕竟它的描述在响应中很明确了
      parameters:
        - name: Authorization
          in: header
          type: string
          required: true
          description: 简单认证下API，就怕有人不小心操作随便输入个接口删了点数据
        - name: data
          in: body
          type: object
          required: true
          description: 传递的参数对象
          schema:
            type: object
            properties:
              user_zh:
                type: string
                description: 用户中文名
                example: 帅气涛
              email:
                type: string
                description: 邮箱，用户id取邮箱@前面的字符
                example: shuaiqitao@xyz.cn
              role:
                type: string
                description: 用户角色英文
                example: interaction
      tags:
        - 用户 User
      responses:
        200:
          description: 创建成功
          schema:
            type: object
            properties:
              code:
                type: number
                description: 信息码
                example: 1
              data:
                type: string
                description: 返回信息
                example: 创建成功
        401:
          description: 未认证
          schema:
            $ref: '#/definitions/401'
        405:
          description: 已存在
          schema:
            type: object
            properties:
              code:
                type: number
                description: 信息码
                example: 0
              data:
                type: string
                description: 错误提示
                example: xx已存在，禁止创建
        406:
          description: 不是新一站员工
          schema:
            type: object
            properties:
              code:
                type: number
                description: 信息码
                example: 0
              data:
                type: string
                description: 返回提示
                example: 不是新一站员工
        default:
          description: 其他错误，看http状态码和返回数据

  /user/{user}:
    head:
      summary: 检查用户是否存在
      description: 响应头会有个Register,有则已注册，无则没有注册
      parameters:
        - name: Authorization
          in: header
          type: string
          required: true
          description: 简单认证下API，就怕有人不小心操作随便输入个接口删了点数据
        - name: user
          in: path
          type: string
          required: true
          description: 用户ID，即用户名
      tags:
        - 用户 User
      responses:
        default:
          description: 注意这个是在响应头中！！！
          schema:
            type: object
            properties:
              Register:
                type: string
                description: 如果这个有则已注册
                example: ok
    # ===================================我是一条分割线==============================
    get:
      summary: 获取单个用户user的信息
      description: 返回单个用户信息
      parameters:
        - name: Authorization
          in: header
          type: string
          required: true
          description: 简单认证下API，就怕有人不小心操作随便输入个接口删了点数据
        - name: user
          in: path
          type: string
          required: true
          description: 用户的ID，名
      tags:
        - 用户 User
      responses:
        200:
          description: user的信息
          schema:
            type: object
            properties:
              code:
                type: number
                description: 信息码
                example: 1
              data:
                type: object
                description: user的信息
                properties:
                  user:
                    type: string
                    description: 用户唯一标识user
                    example: shuaiqitao
                  user_zh:
                    type: string
                    description: 用户中文名
                    example: 帅气涛
                  email:
                    type: string
                    description: 邮箱
                    example: shuaiqitao@xyz.cn
                  role:
                    type: string
                    description: 用户扮演的角色
                    example: interaction
                  role_zh:
                    type: string
                    description: 角色中文名
                    example: 交互设计师
        401:
          description: 未认证
          schema:
            $ref: '#/definitions/401'
        404:
          description: 用户不存在
          schema:
            type: object
            properties:
              code:
                type: number
                description: 信息码
                example: 0
              msg:
                type: string
                description:  错误提示
                example: 用户不存在
        default:
          description: 其他错误，看http状态码和返回数据
    # ===================================我是一条分割线==============================
    put:
      summary: 更新用户信息
      description: 只对根据传入的数据进行更新，现在因为需求的一些问题，这个接口暂时这样，以后可以进行拓展
      parameters:
        - name: Authorization
          in: header
          type: string
          required: true
          description: 简单认证下API，就怕有人不小心操作随便输入个接口删了点数据
        - name: user
          in: path
          type: string
          required: true
          description: 用户唯一标识，即用户英文名
        - name: data
          in: body
          type: object
          required: true
          description: 数据
          schema:
            properties:
              role:
                type: string
                description: 扮演的角色英文名
                example: interaction
      tags:
        - 用户 User
      responses:
        200:
          description: 更新成功返回信息
          schema:
            type: object
            properties:
              code:
                type: number
                description: 信息码
                example: 1
              data:
                type: string
                description: 返回提示
                example: 用户xx信息更新成功
        401:
          description: 未认证
          schema:
            $ref: '#/definitions/401'
        404:
          description: 用户不存在
          schema:
            type: object
            properties:
              code:
                type: number
                description: 信息码
                example: 0
              msg:
                type: string
                description: 错误提示
                example: 用户xx不存在，请先添加
        default:
          description: 其他错误，看http状态码和返回数据
    # ===================================我是一条分割线==============================
    delete:
      summary: 删除指定用户
      description: 删除用户user，需要校验操作者权限
      parameters:
        - name: Authorization
          in: header
          type: string
          required: true
          description: 简单认证下API，就怕有人不小心操作随便输入个接口删了点数据
        - name: user
          in: path
          type: string
          required: true
          description: 用户唯一标识Id，用户名
      tags:
        - 用户 User
      responses:
        200:
          description: 删除成功
          schema:
            type: object
            properties:
              code:
                type: number
                description: 信息码
                example: 1
              data:
                type: string
                description: 返回数据
                example: 尊敬的管理员大人，用户xx删除成功
        403:
          description: 有人盗用权限
          schema:
            type: object
            properties:
              code:
                type: number
                description: 信息码
                example: 0
              msg:
                type: string
                description: 返回数据
                example: 不存在的，权限校验是在服务端，what can you do?
        404:
          description: 用户不存在
          schema:
            type: object
            properties:
              code:
                type: number
                description: 信息码
                example: 0
              msg:
                type: string
                description: 错误提示
                example: 用户xx不存在
        default:
          description: 其他错误，看http状态码

  /users/search:
    get:
      summary: 从OA系统中搜索
      description: 当用户输入s时，它会从OA中搜出关于s的邮箱关联的一连串数据，主要是添加评委时用到的
      parameters:
        - name: Authorization
          in: header
          type: string
          required: true
          description: 简单认证下API，就怕有人不小心操作随便输入个接口删了点数据
        - name: keyword
          in: query
          type: string
          required: true
          description: 关键字
          example: sss
        - name: size
          in: query
          type: string
          description: 返回数量，不传则默认为三个
      tags:
        - 用户 User
      responses:
        200:
          description: 返回关于s的邮箱关联数据
          schema:
            type: object
            properties:
              code:
                type: number
                description: 信息码
                example: 1
              data:
                type: object
                description: 返回数据
                properties:
                  total:
                    type: number
                    description: 总量
                    example: 1
                  items:
                    type: array
                    description: 一条数据
                    items:
                      type: object
                      properties:
                        user:
                          type: string
                          description: 用户唯一标识，即用户名
                          example: shuqitao
                        user_zh:
                          type: string
                          description: 用户中文名
                          example: 帅气涛
                        eamil:
                          type: string
                          description: 邮箱
                          example: shuaiqitao@xyz.cn
        401:
          description: 未认证
          schema:
            $ref: '#/definitions/401'
        default:
          description: 其他错误，看http状态码
  # 后台用户信息接口 --- 结束

  # 设置接口 --- 开始
  /setting/projects:
    get:
      summary: 获取所有项目信息
      description: 返回所有的项目，由于这个是有限的，所以无需设置index索引
      parameters:
        - name: Authorization
          in: header
          type: string
          required: true
          description: 简单认证下API，就怕有人不小心操作随便输入个接口删了点数据
      tags:
        - 设置 Setting
      responses:
        200:
          description: 成功返回数据
          schema:
            type: object
            properties:
              code:
                type: number
                description: 信息码
                example: 1
              data:
                type: object
                properties:
                  total:
                    type: number
                    description: 数据数量
                    example: 1
                  items:
                    type: array
                    items:
                      $ref: '#/definitions/Project'
        401:
          description: 未认证
          schema:
            $ref: '#/definitions/401'
        default:
          description: 其他错误，看http状态码
    # ===================================我是一条分割线==============================
    post:
      summary: 创建一个项目
      description: 根据传的对象创建信息
      parameters:
        - name: Authorization
          in: header
          type: string
          required: true
          description: 简单认证下API，就怕有人不小心操作随便输入个接口删了点数据
        - name: data
          in: body
          type: object
          required: true
          description: 需要添加的项目信息
          schema:
            properties:
              name:
                type: string
                description: 项目名称
                example: 新一站保险网
              platform:
                type: array
                description: 项目平台
                example:
                  - pc
                  - app
              folder:
                type: string
                description: 对应的原型文件夹
                example: 新一站保险网
              remark:
                type: string
                description: 备注
                example: 包含PC、Wap、App
      tags:
        - 设置 Setting
      responses:
        200:
          description: 创建成功，返回信息
          schema:
            type: object
            properties:
              code:
                type: number
                description: 信息码
                example: 1
              data:
                type: string
                description: 返回数据
                example: 尊敬管理员大人，你创建了项目：xxx
        400:
          description: 缺少参数
          schema:
            type: object
            properties:
              code:
                type: number
                description: 信息码
                example: 0
              msg:
                type: string
                description: 错误提示
                example: 缺少[xx]、[xx]字段
        401:
          description: 未认证
          schema:
            $ref: '#/definitions/401'
        405:
          description: 项目已存在，方法被禁止
          schema:
            type: object
            properties:
              code:
                type: number
                description: 信息码
                example: 0
              msg:
                type: string
                description: 错误提示
                example: 大兄弟，xxx项目有了，你现在只能更新或者删除它
        default:
          description: 其他错误，看http状态码
    # ===================================我是一条分割线==============================

  /setting/project/{_id}:
    get:
      summary: 获取_id的项目信息
      description: 用于获取单个信息
      parameters:
        - name: Authorization
          in: header
          type: string
          required: true
          description: 简单认证下API，就怕有人不小心操作随便输入个接口删了点数据
        - name: _id
          in: path
          required: true
          type: string
          description: 项目的主键_id
      tags:
        - 设置 Setting
      responses:
        200:
          description: 项目_id的信息
          schema:
            type: object
            properties:
              code:
                type: number
                description: 信息码
                example: 1
              data:
                type: object
                $ref: '#/definitions/Project'
        401:
          description: 未认证
          schema:
            $ref: '#/definitions/401'
        404:
          description: 项目不存在
          schema:
            type: object
            properties:
              code:
                type: number
                description: 信息码
                example: 0
              msg:
                type: string
                description: 错误提示
                example: 编号为59cb1046bcda35984ded3a83的项目不存在
        default:
          description: 其他错误，看http状态码
    # ===================================我是一条分割线==============================
    put:
      summary: 更新指定项目
      description: 根据传入的数据进行修改
      parameters:
        - name: Authorization
          in: header
          type: string
          required: true
          description: 简单认证下API，就怕有人不小心操作随便输入个接口删了点数据
        - name: _id
          in: path
          required: true
          type: string
          description: 项目主键_id
        - naem: data
          in: body
          required: true
          description: 根据传入的数据更新
          schema:
            properties:
              platform:
                type: array
                description: 项目平台
                example:
                  - pc
                  - app
              folder:
                type: string
                description: 对应的原型文件夹
                example: 新一站保险网
      tags:
        - 设置 Setting
      responses:
        200:
          description: 返回更新成功提示
          properties:
            code:
              type: number
              description: 信息码
              example: 1
            data:
              type: string
              description: 返回数据
              example: 更新成功
        401:
          description: 未认证
          schema:
            $ref: '#/definitions/401'
        404:
          description: 项目不存在
          schema:
            type: object
            properties:
              code:
                type: number
                description: 信息码
                example: 0
              msg:
                type: string
                description: 错误提示
                example: 编号为59cb1046bcda35984ded3a83的项目不存在
        default:
          description: 其他错误，看http状态码
    # ===================================我是一条分割线==============================
    delete:
      summary: 删除项目_id
      description: 把指定_id项目从数据库中删除
      parameters:
        - name: Authorization
          in: header
          type: string
          required: true
          description: 简单认证下API，就怕有人不小心操作随便输入个接口删了点数据
        - name: _id
          in: path
          required: true
          type: string
          description: 项目主键_id
      tags:
        - 设置 Setting
      responses:
        200:
          description: 删除成功
          schema:
            type: object
            properties:
              code:
                type: number
                description: 信息码
                example: 1
              data:
                type: string
                description: 返回数据
                example: 删除成功
        401:
          description: 未认证
          schema:
            $ref: '#/definitions/401'
        404:
          description: 项目不存在
          schema:
            type: object
            properties:
              code:
                type: number
                description: 信息码
                example: 0
              msg:
                type: string
                description: 错误提示
                example: 项目xxx不存在
        default:
          description: 其他错误，看http状态码

  /setting/questions:
    get:
      summary: 多个评审问题信息获取
      description: 返回有关评审问题类型
      parameters:
        - name: Authorization
          in: header
          type: string
          required: true
          description: 简单认证下API，就怕有人不小心操作随便输入个接口删了点数据


  # 设置接口 --- 结束


definitions:
  Response:
    properties:
      code*:
        type: number
        description: 返回的信息码
        example:
          - -1 系统错误，只有5xx级别的状态码才会出现
          - 0 响应成功，但是想要的操作不成功，比如说少一个参数什么的，权限不够什么的
          - 1 这是一个完全成功的响应
      msg:
        type: string
        description: 错误的详细信息
        example: 缺少xxx参数
      data:
        type: any
        description: 响应的数据，可以是任何类型
        example: {
          "id": 1, "age": 18, "name": "tao"
        }
  401:
    properties:
      code*:
        type: number
        description: 状态码
        example: 0
      msg:
        type: string
        description: 错误提示
        example: 未认证
  User:
    type: object
    properties:
      user:
        type: string
        description: 域账号
        example: shuqitao
      lv:
        type: number
        description: 用户权限
        example: 100
      email:
        type: string
        description: 邮箱
        example: nigntao@xyz.cn
      role:
        type: string
        description: 用户扮演的角色
        example: 'front-end'
  Zh_En:
    type: object
    properties:
      type:
        type: string
        description: 类型
        example: name
      en:
        type: string
        description: 中文名
        example: zh_en
      shuaiqitao:
        type: string
        description: 中文名
        example: 帅气涛
  Project:
    type: object
    properties:
      _id:
        type: string
        description: 项目唯一主键，也是db里的唯一主键
        example: 59cb1046bcda35984ded3a83
      name:
        type: string
        description: 项目名称
        example: 新一站保险网
      platform:
        type: array
        description: 项目平台
        example:
          - pc
          - app
      folder:
        type: string
        description: 对应的原型文件夹
        example: 新一站保险网
      remark:
        type: string
        description: 备注
        example: 包含PC、Wap、App
